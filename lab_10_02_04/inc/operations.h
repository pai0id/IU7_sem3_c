#ifndef OPERATIONS_H
#define OPERATIONS_H

#include "list.h"
#include "err.h"

/**
 * \brief Умножение двух чисел, представленных.
 *
 * Функция умножает два числа, представленных, и возвращает результат
 * в виде нового списка множителей.
 *
 * \param num1 [in] - Указатель на первое число.
 * \param num2 [in] - Указатель на второе число.
 * \return Указатель на результат умножения.
 *         NULL в случае ошибки выделения памяти.
 */
node_t *mul_nums(node_t *num1, node_t *num2);

/**
 * \brief Возведение числа в квадрат.
 *
 * Функция возводит число, представленное, в квадрат
 * и возвращает результат в виде нового списка множителей.
 *
 * \param num [in] - Указатель на число.
 * \return Указатель на результат возведения в квадрат.
 *         NULL в случае ошибки выделения памяти.
 */
node_t *sqr_num(node_t *num);

/**
 * \brief Упрощение чисел (сокращение общих множителей).
 *
 * Функция выполняет упрощение чисел, сокращая повторяющиеся множители
 *
 * \param num1 [in] - Указатель на первое число.
 * \param num2 [in] - Указатель на второе число.
 * \param new_num1 [out] - Указатель на переменную, в которую будет записан указатель
 *                         на результат упрощения первого числа.
 * \param new_num2 [out] - Указатель на переменную, в которую будет записан указатель
 *                         на результат упрощения второго числа.
 * \return OK в случае успешного упрощения.
 *         ERR_NULL в случае ошибки выделения памяти.
 */
int reduce_nums(node_t *num1, node_t *num2, node_t **new_num1, node_t **new_num2);

/**
 * \brief Деление чисел.
 *
 * Функция выполняет деление чисел.
 * Результат деления возвращается в виде нового списка множителей. Память под
 * новый список выделяется динамически и должна быть освобождена пользователем.
 *
 * \param num1 [in] - Указатель на первое число.
 * \param num2 [in] - Указатель на второе число.
 * \return Указатель на новый список множителей, представляющий результат деления.
 *         NULL в случае ошибки или если второе число равно нулю.
 */
node_t *div_nums(node_t *num1, node_t *num2);

#endif
