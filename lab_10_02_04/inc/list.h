#ifndef LIST_H
#define LIST_H

#include "node_list.h"
#include "err.h"
#include <stdio.h>

/**
 * \brief Добавление узла в конец списка.
 *
 * Функция добавляет узел в конец списка.
 *
 * \param head [in] - Указатель на голову списка.
 * \param pnode [in] - Указатель на узел, который нужно добавить в конец списка.
 * \return Указатель на новую голову списка.
 */
node_t *list_add_tail(node_t *head, node_t *pnode);

/**
 * \brief Инициализация списка из числа.
 *
 * Функция создает список из числа.
 *
 * \param head [out] - Указатель на указатель на голову списка.
 * \param num [in] - Число
 * \return Код ошибки (OK, ERR_MEM).
 */
int init_list_from_num(node_t **head, int num);

/**
 * \brief Получение числа из списка множителей.
 *
 * Функция вычисляет значение числа, представленного в виде списка множителей.
 *
 * \param head [in] - Указатель на начало списка множителей.
 * \return Значение числа, вычисленное из списка множителей.
 */
int get_num_from_list(node_t *head);

/**
 * \brief Вывод множителя числа в файл.
 *
 * Функция выводит множитель числа в файл. Множитель представлен в виде узла списка,
 * содержащего числовое значение и степень.
 *
 * \param f [in,out] - Указатель на файл, в который производится вывод.
 * \param num [in] - Указатель на узел списка, представляющий множитель числа.
 */
void print_factor(FILE *f, const void *num);

/**
 * \brief Вывод числа в файл в обратном порядке.
 *
 * Функция выводит число, представленное в виде списка, в обратном порядке в файл.
 * После вывода всех цифр добавляется символ '1' в конец числа.
 *
 * \param f [in/out] - Указатель на файл, в который производится вывод.
 * \param head [in] - Указатель на голову списка, представляющего число.
 */
void print_num(FILE *f, node_t *head);

/**
 * \brief Печать списка в обратном порядке в файл.
 *
 * Функция выводит содержимое списка в файл.
 *
 * \param f [in\out] - Указатель на файл.
 * \param head [in] - Указатель на голову списка.
 * \param print [in] - Функция печати элемента списка.
 */
void list_print_reverse(FILE *f, node_t *head, void (*print)(FILE*, const void*));

/**
 * \brief Освобождение памяти, занятой списком.
 *
 * Функция освобождает память, занятую списком, начиная с головы.
 *
 * \param head [in] - Указатель на голову списка.
 */
void list_free(node_t *head);

#endif
