#ifndef FILTER_H
#define FILTER_H

#include <stdio.h>
#include <stdlib.h>
#include "err.h"

/**
 * \brief Вычисление среднего арифметического значений в массиве.
 *
 * \param pb_src [in] - указатель на начало массива
 * \param pe_src [in] - указатель на конец массива
 * \param avr [out] - указатель, в который будет записан результат вычисления
 * 
 * \return Код ошибки:
 *         - OK, если среднее арифметическое успешно вычислено
 *         - ERR_SIZE, если размер массива равен нулю
 */
int calculate_avr(const int *pb_src, const int *pe_src, double *avr);

/**
 * \brief Подсчет количества элементов, превышающих среднее арифметическое.
 *
 * \param pb_src [in] - указатель на начало массива
 * \param pe_src [in] - указатель на конец массива
 * \param avr [in] - среднее арифметическое значение
 * \param count [out] - указатель, в который будет записан результат подсчета
 * 
 * \return Код ошибки:
 *         - OK, если количество элементов успешно подсчитано
 *         - ERR_SIZE, если количество элементов равно нулю
 */
int count_above_avr(const int *pb_src, const int *pe_src, double avr, int *count);

/**
 * \brief Копирование элементов, превышающих среднее арифметическое, в новый массив.
 *
 * \param pb_src [in] - указатель на начало исходного массива
 * \param pe_src [in] - указатель на конец исходного массива
 * \param avr [in] - среднее арифметическое значение
 * \param pb_dst [out] - указатель на указатель начала нового массива
 * \param pe_dst [out] - указатель на указатель конца нового массива
 * 
 * \return Код ошибки:
 *         - OK, если новый массив успешно создан и заполнен
 *         - ERR_MEM, если не удалось выделить память под новый массив
 *         - ERR_SIZE, если количество элементов равно нулю
 */
int copy_above_avr(const int *pb_src, const int *pe_src, double avr, int **pb_dst, int **pe_dst);

/**
 * \brief Функция формирования нового массива из элементов, превышающих среднее арифметическое.
 *
 * Функция принимает указатели на начало (pb_src) и конец (pe_src) исходного массива. 
 * Создаёт новый массив, содержащий элементы, превышающие среднее арифметическое всех элементов исходного массива.
 * Новый массив начинается с pb_dst и заканчивается pe_dst. 
 * Возвращает код ошибки.
 *
 * \param pb_src [in] - указатель на начало исходного массива
 * \param pe_src [in] - указатель на конец исходного массива
 * \param pb_dst [out] - указатель на указатель начала нового массива
 * \param pe_dst [out] - указатель на указатель конца нового массива
 * 
 * \return Код ошибки:
 *         - OK, если новый массив успешно сформирован
 *         - ERR_SIZE, если размер исходного массива равен нулю
 *         - ERR_MEM, если не удалось выделить память для нового массива
 */
int key(const int *pb_src, const int *pe_src, int **pb_dst, int **pe_dst);

#endif
