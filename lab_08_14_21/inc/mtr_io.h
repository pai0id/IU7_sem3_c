#ifndef MTR_IO_H
#define MTR_IO_H

#include <stdio.h>
#include <stddef.h>
#include "err.h"

#define EPS 1e-7

/**
 * \brief Заполнение матрицы нулями.
 *
 * Функция заполняет матрицу нулевыми значениями.
 *
 * \param data [in] - указатель на массив указателей на строки матрицы
 * \param n [in] - количество строк в матрице
 * \param m [in] - количество столбцов в матрице
 */
void matrix_fill_null(double **data, size_t n, size_t m);

/**
 * \brief Заполнение матрицы диагонали единицами, остальные элементы нулями.
 *
 * Функция заполняет матрицу таким образом, что элементы на диагонали равны 1, а остальные равны 0.
 *
 * \param data [in] - указатель на массив указателей на строки матрицы
 * \param n [in] - количество строк в матрице
 * \param m [in] - количество столбцов в матрице
 */
void matrix_fill_d_ones(double **data, size_t n, size_t m);

/**
 * \brief Копирование содержимого одной матрицы в другую.
 *
 * Функция копирует содержимое матрицы src в матрицу dest.
 *
 * \param src [in] - указатель на массив указателей на строки исходной матрицы
 * \param n [in] - количество строк в матрице
 * \param m [in] - количество столбцов в матрице
 * \param dest [out] - указатель на массив указателей на строки целевой матрицы
 */
void matrix_copy(double **src, size_t n, size_t m, double **dest);

/**
 * \brief Считывание координат и значений элементов матрицы из файла.
 *
 * Функция считывает из файла координаты и значения элементов матрицы, и заполняет ими переданную матрицу data.
 *
 * \param f [in/out] - указатель на файл, из которого будет считаны данные
 * \param data [out] - указатель на массив указателей на строки матрицы
 * \param n [in] - количество строк в матрице
 * \param m [in] - количество столбцов в матрице
 * \param cnt_el [in] - количество элементов, которые нужно считать
 *
 * \return Код ошибки:
 *         - OK, если ошибок не возникло
 *         - ERR_IO, если произошла ошибка ввода-вывода
 *         - ERR_RANGE, если координаты выходят за пределы матрицы
 */
int matrix_read_coord(FILE *f, double **data, size_t n, size_t m, size_t cnt_el);

/**
 * \brief Создание и заполнение матрицы из файла.
 *
 * Функция считывает m и n, создает матрицу с размерами nxm, считывает координаты и значения элементов из файла,
 * и заполняет ими матрицу data.
 *
 * \param f [in/out] - указатель на файл, из которого будет считаны данные
 * \param data [out] - указатель на массив указателей на строки матрицы
 * \param n [out] - количество строк в матрице
 * \param m [out] - количество столбцов в матрице
 *
 * \return Код ошибки:
 *         - OK, если ошибок не возникло
 *         - ERR_IO, если произошла ошибка ввода-вывода
 *         - ERR_MEM, если не удалось выделить память под матрицу
 *         - ERR_RANGE, если координаты выходят за пределы матрицы
 */
int matrix_create(FILE *f, double ***data, size_t *n, size_t *m);

/**
 * \brief Вывод матрицы в файл.
 *
 * Функция выводит матрицу в файл.
 *
 * \param f [in/out] - указатель на файл, в который будет выведена матрица
 * \param data [in] - указатель на массив указателей на строки матрицы
 * \param n [in] - количество строк в матрице
 * \param m [in] - количество столбцов в матрице
 */
void matrix_print_simple(FILE *f, double **data, size_t n, size_t m);

#endif
